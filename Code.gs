function getDataBySql(
    strSQL = "SELECT * FROM `ads_collection` WHERE `source` = 'Google'"
) {
    try {
        // === 1. –ù–∞–¥—Å–∏–ª–∞—î–º–æ POST –∑–∞–ø–∏—Ç –¥–æ PHP –±–µ–∫–µ–Ω–¥—É ===
        const url = "https://api.trll-notif.com.ua/adsreportcollector/core.php";

        const options = {
            method: "post",
            contentType: "application/json",
            payload: JSON.stringify({ sql: strSQL }),
            muteHttpExceptions: true,
        };

        console.log("üîç Sending request to database API...");
        const response = UrlFetchApp.fetch(url, options);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP —Å—Ç–∞—Ç—É—Å
        if (response.getResponseCode() !== 200) {
            return {
                error: `HTTP ${response.getResponseCode()}: –°–µ—Ä–≤–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`,
            };
        }

        const responseText = response.getContentText();
        if (!responseText || responseText.trim() === "") {
            return { error: "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö" };
        }

        let json;
        try {
            json = JSON.parse(responseText);
        } catch (parseError) {
            return {
                error: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: " + parseError.message,
            };
        }

        // === 2. –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ –±–µ–∫–µ–Ω–¥—É ===
        if (json.error) {
            return { error: json.error };
        }

        if (!json || !Array.isArray(json) || json.length === 0) {
            return { error: "empty data" };
        }

        // === 3. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–∞–Ω—ñ –Ω–∞–ø—Ä—è–º—É (–ë–ï–ó —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–∏—Å—Ç—ñ–≤) ===
        const data = json;

        // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤ —Ñ–æ—Ä–º–∞—Ç, —è–∫–∏–π –æ—á—ñ–∫—É—î —Ñ—É–Ω–∫—Ü—ñ—è parseDbResults
        if (typeof data[0] === "object" && !Array.isArray(data[0])) {
            // –Ø–∫—â–æ —Ü–µ –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤, –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤ —Ñ–æ—Ä–º–∞—Ç [headers, ...rows]
            const headers = Object.keys(data[0]);
            const rows = data.map((row) => headers.map((h) => row[h]));
            console.log("‚úÖ Successfully processed", rows.length, "data rows");
            return [headers, ...rows];
        } else {
            // –Ø–∫—â–æ –≤–∂–µ –º–∞—Å–∏–≤ –º–∞—Å–∏–≤—ñ–≤
            console.log("‚úÖ Successfully received", data.length, "data rows");
            return data;
        }
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –≤ getDataBySql:", error);
        return { error: "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: " + error.message };
    }
}

/**
 * –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏ - —Ç–æ—á–Ω–µ–µ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –±–∞–π–µ—Ä–∞
 */
function parseCampaignName(fullName) {
    const result = {
        article: "",
        productName: "",
        buyer: "",
        source: "",
        account: "",
    };

    if (!fullName || typeof fullName !== "string") {
        return result;
    }

    try {
        console.log("üîç Parsing campaign name:", fullName);

        // –ò—â–µ–º –∞—Ä—Ç–∏–∫—É–ª –≤ –Ω–∞—á–∞–ª–µ (–±—É–∫–≤—ã + —Ü–∏—Ñ—Ä—ã)
        const articleMatch = fullName.match(/^([A-Z]+\d+)/);
        if (articleMatch) {
            result.article = articleMatch[1];
        }

        // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ " | "
        const parts = fullName.split(" | ");
        console.log("üìù Campaign parts:", parts);

        if (parts.length >= 2) {
            // –í–¢–û–†–û–ô —ç–ª–µ–º–µ–Ω—Ç - —ç—Ç–æ –ë–ê–ô–ï–† (—Ç–æ—á–Ω–æ!)
            result.buyer = parts[1].trim();
            console.log("üë§ Found buyer:", result.buyer);

            if (parts.length >= 3) {
                // –¢—Ä–µ—Ç–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ + –∞–∫–∫–∞—É–Ω—Ç
                const sourceAccountPart = parts[2].trim();

                // –ü–∞—Ä—Å–∏–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ –∞–∫–∫–∞—É–Ω—Ç
                // –ü—Ä–∏–º–µ—Ä: "TikTok WL1 Akk1.5" -> –∏—Å—Ç–æ—á–Ω–∏–∫: "TikTok", –∞–∫–∫–∞—É–Ω—Ç: "WL1"
                const sourceMatch = sourceAccountPart.match(
                    /^(TikTok|TikTok|Instagram|Google)\s*(.*)/i
                );
                if (sourceMatch) {
                    result.source = sourceMatch[1];
                    const accountPart = sourceMatch[2];

                    // –ò—â–µ–º –∞–∫–∫–∞—É–Ω—Ç (–æ–±—ã—á–Ω–æ VL + —Ü–∏—Ñ—Ä—ã –∏–ª–∏ WL + —Ü–∏—Ñ—Ä—ã)
                    const accountMatch = accountPart.match(/\b(VL\d+|WL\d+|[A-Z]+\d+)\b/);
                    if (accountMatch) {
                        result.account = accountMatch[1];
                    }
                } else {
                    result.source = sourceAccountPart;
                }
            }
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–º–µ–∂–¥—É –∞—Ä—Ç–∏–∫—É–ª–æ–º –∏ –ø–µ—Ä–≤—ã–º " | ")
        if (parts.length >= 1) {
            const firstPart = parts[0];
            const productMatch = firstPart.replace(result.article, "").trim();
            if (productMatch.startsWith(" ")) {
                result.productName = productMatch
                    .substring(1)
                    .replace(/\s*-\s*$/, "")
                    .trim();
            }
        }
    } catch (e) {
        console.log("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏:", fullName, e);
    }

    console.log("‚úÖ Parsed campaign info:", result);
    return result;
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
function doGet() {
    return HtmlService.createTemplateFromFile("–ì—Ä–∞—Ñ–∏–∫ HTML")
        .evaluate()
        .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL)
        .setTitle("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ Google Ads");
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤
 */
function include(filename) {
    return HtmlService.createHtmlOutputFromFile(filename).getContent();
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–µ—Ç—Ä–∏–∫ –ø–æ –ø–æ—Ä—è–¥–∫—É –±–∞–π–µ—Ä–æ–≤
 */
function sortMetricsByBuyers(metrics, buyers, buyerGroupsMap) {
    const sortedMetrics = [];

    buyers.forEach((buyer) => {
        if (buyerGroupsMap[buyer]) {
            Array.from(buyerGroupsMap[buyer]).forEach((group) => {
                if (metrics.includes(group) && !sortedMetrics.includes(group)) {
                    sortedMetrics.push(group);
                }
            });
        }
    });

    metrics.forEach((metric) => {
        if (!sortedMetrics.includes(metric)) {
            sortedMetrics.push(metric);
        }
    });

    return sortedMetrics.join("\n");
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤–∏–¥–µ–æ –ø–æ –ø–æ—Ä—è–¥–∫—É –±–∞–π–µ—Ä–æ–≤
 */
function sortVideosByBuyers(buyers, buyerVideosMap, globalVideos) {
    const sortedVideos = [];

    buyers.forEach((buyer) => {
        if (buyerVideosMap[buyer]) {
            Array.from(buyerVideosMap[buyer]).forEach((video) => {
                if (!sortedVideos.includes(video)) {
                    sortedVideos.push(video);
                }
            });
        }
    });

    Array.from(globalVideos).forEach((video) => {
        if (!sortedVideos.includes(video)) {
            sortedVideos.push(video);
        }
    });

    return sortedVideos.join("\n");
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–∞–π—Ç–æ–≤ –ø–æ –ø–æ—Ä—è–¥–∫—É –±–∞–π–µ—Ä–æ–≤
 */
function sortSitesByBuyers(buyers, buyerSitesMap, globalSites) {
    const sortedSites = [];

    buyers.forEach((buyer) => {
        if (buyerSitesMap[buyer]) {
            Array.from(buyerSitesMap[buyer]).forEach((site) => {
                if (!sortedSites.includes(site)) {
                    sortedSites.push(site);
                }
            });
        }
    });

    Array.from(globalSites).forEach((site) => {
        if (!sortedSites.includes(site)) {
            sortedSites.push(site);
        }
    });

    return sortedSites.join("\n");
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏–∑ –º–µ–Ω—é
 */
function buildChartForSelectedArticle() {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —è—á–µ–π–∫—É
        const sheet = SpreadsheetApp.getActiveSheet();
        const activeCell = sheet.getActiveCell();
        const article = activeCell.getValue();

        if (!article || typeof article !== "string" || article.trim() === "") {
            SpreadsheetApp.getUi().alert(
                "–û—à–∏–±–∫–∞!",
                "–í—ã–±–µ—Ä–∏—Ç–µ —è—á–µ–π–∫—É —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.",
                SpreadsheetApp.getUi().ButtonSet.OK
            );
            return;
        }

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        openAnalyticsWebApp();
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ buildChartForSelectedArticle:", error);
        SpreadsheetApp.getUi().alert(
            "–û—à–∏–±–∫–∞!",
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: " + error.toString(),
            SpreadsheetApp.getUi().ButtonSet.OK
        );
    }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
 */
function openAnalyticsWebApp() {
    try {
        // URL –≤–∞—à–µ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π URL –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è)
        const webAppUrl =
            "https://script.google.com/macros/s/AKfycbxn54C-SGtaWrYPUfd1E7s0Ief2HFJ3cfShvRYfxJuEqZ1GM-7JQXYjTFT0Hk5VoVaGRA/exec";

        // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
        const html = `
      <script>
        window.open('${webAppUrl}', '_blank');
        google.script.host.close();
      </script>
      <p>–û—Ç–∫—Ä—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ...</p>
    `;

        const htmlOutput = HtmlService.createHtmlOutput(html)
            .setWidth(300)
            .setHeight(100);

        SpreadsheetApp.getUi().showModalDialog(htmlOutput, "–û—Ç–∫—Ä—ã—Ç–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...");
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:", error);
        SpreadsheetApp.getUi().alert(
            "–û—à–∏–±–∫–∞!",
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n" + error.toString(),
            SpreadsheetApp.getUi().ButtonSet.OK
        );
    }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ - –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 */
function buildChartForArticle(article, periodStart, periodEnd) {
    console.log("üî• =================================");
    console.log("üî• –ù–ê–ß–ê–õ–û –§–£–ù–ö–¶–ò–ò buildChartForArticle");
    console.log("üî• –ê—Ä—Ç–∏–∫—É–ª:", article);
    console.log("üî• –ü–µ—Ä–∏–æ–¥ —Å:", periodStart);
    console.log("üî• –ü–µ—Ä–∏–æ–¥ –¥–æ:", periodEnd);
    console.log("üî• =================================");

    try {
        // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
        function formatValueByRow(value, rowIndex) {
            // –î–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π –≤–∏–¥–µ–æ (–∏–Ω–¥–µ–∫—Å 23), URL (24) –∏ —à–∞–±–ª–æ–Ω–æ–≤ (25) –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
            if (rowIndex === 23 || rowIndex === 24 || rowIndex === 25) {
                return value ? String(value).trim() : "";
            }

            // –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥: —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã, –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏
            const strVal = String(value || "").trim().replace(/\s+/g, "").replace(",", ".");
            const num = parseFloat(strVal);
            if (isNaN(num)) return value ? String(value) : "";

            switch (rowIndex) {
                case 11: // –î–æ–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π - –≤ %
                case 12: // CTR - –≤ %
                case 15: // –î–æ–ª—è –ø–æ–∫–∞–∑–æ–≤ - –≤ %
                case 19: // 25% –≤–∏–¥–µ–æ - –≤ %
                case 20: // 50% –≤–∏–¥–µ–æ - –≤ %
                case 21: // 75% –≤–∏–¥–µ–æ - –≤ %
                case 22: // 100% –≤–∏–¥–µ–æ - –≤ %
                    return num.toFixed(2).replace(".", ",") + "%";
                case 13: // CPM - —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
                case 14: // CPC - —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
                    return num.toFixed(2).replace(".", ",");
                case 16: // –ü–æ–∫–∞–∑—ã - —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
                case 17: // –ü—Ä–æ—Å–º–æ—Ç—Ä—ã - —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
                case 18: // –ö–ª–∏–∫–∏ - —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
                    return String(Math.floor(num));
                default:
                    return num.toFixed(2).replace(".", ",");
            }
        }

        function sumMultilineValues(valuesArray) {
            if (!Array.isArray(valuesArray)) return 0;

            let totalSum = 0;
            valuesArray.forEach((val) => {
                if (val !== undefined && val !== null && val !== "") {
                    const lines = String(val).split("\n");
                    lines.forEach((line) => {
                        const trimmedLine = line.trim();
                        if (trimmedLine !== "") {
                            const num = Number(trimmedLine) || 0;
                            totalSum += num;
                        }
                    });
                }
            });

            return totalSum;
        }

        function processDayValues(arr, rowIndex) {
            if (!Array.isArray(arr)) {
                return "";
            }

            // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –¥–ª—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ø–æ–ª–µ–π
            let valuesToConvert;
            if (rowIndex === 18) {
                // URL - —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                valuesToConvert = Array.from(
                    new Set(arr.filter((v) => v !== undefined && v !== null && v !== ""))
                );
            } else if (rowIndex === 17) {
                // –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã - —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ
                valuesToConvert = Array.from(
                    new Set(
                        arr.filter(
                            (v) =>
                                v !== undefined &&
                                v !== null &&
                                v !== "" &&
                                String(v).trim() !== ""
                        )
                    )
                );
            } else {
                // –ß–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è - –æ—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è
                valuesToConvert = arr.filter(
                    (v) => v !== undefined && v !== null && v !== ""
                );
            }

            return valuesToConvert
                .map((v) => formatValueByRow(v, rowIndex))
                .join("\n");
        }

        function calculateRating(cpl, ratingThreshold) {
            if (cpl === 0 || isNaN(cpl) || ratingThreshold === 0) return "";

            const percentage = (cpl / ratingThreshold) * 100;

            if (percentage <= 35) return "A";
            else if (percentage <= 65) return "B";
            else if (percentage <= 90) return "C";
            else return "D";
        }

        function parseSeason(seasonEmoji) {
            if (!seasonEmoji || seasonEmoji.trim() === "") return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";

            const seasonString = seasonEmoji.trim();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤—Å–µ—Å–µ–∑–æ–Ω (–≤—Å–µ 4 —ç–º–æ–¥–∑–∏)
            if (
                seasonString.includes("‚òÄÔ∏è") &&
                seasonString.includes("üçÅ") &&
                seasonString.includes("‚ùÑÔ∏è") &&
                seasonString.includes("üå±")
            ) {
                return "–í—Å–µ—Å–µ–∑–æ–Ω";
            }

            const seasons = [];
            if (seasonString.includes("‚òÄÔ∏è")) seasons.push("–õ–µ—Ç–æ");
            if (seasonString.includes("üçÅ")) seasons.push("–û—Å–µ–Ω—å");
            if (seasonString.includes("‚ùÑÔ∏è")) seasons.push("–ó–∏–º–∞");
            if (seasonString.includes("üå±")) seasons.push("–í–µ—Å–Ω–∞");

            return seasons.length > 0 ? seasons.join(", ") : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
        }

        // –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î —Å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏
        function getDataFromDatabase(sqlQuery) {
            try {
                console.log("Executing SQL query...");
                const result = getDataBySql(sqlQuery);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –æ—Ç API
                if (result && typeof result === "object" && result.error) {
                    if (result.error === "empty data") {
                        throw new Error("EMPTY_DATA");
                    }
                    throw new Error(
                        `üö® –û—à–∏–±–∫–∞ API –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!\n\n–ö–æ–¥ –æ—à–∏–±–∫–∏: ${result.error}\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã.`
                    );
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö
                if (!Array.isArray(result)) {
                    throw new Error(
                        "üîß –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!\n\n–ü–æ–ª—É—á–µ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
                    );
                }

                if (result.length === 0) {
                    throw new Error("EMPTY_DATA");
                }

                console.log("‚úÖ Data received successfully:", result.length, "rows");
                return result;
            } catch (error) {
                console.error("‚ùå Error getting data from database:", error);
                throw error;
            }
        }

        function parseDbResults(data) {
            if (!data || data.length < 2) return [];

            const headers = data[0];
            const rows = data.slice(1);

            return rows.map((row) => {
                const obj = {};
                headers.forEach((header, index) => {
                    obj[header] = row[index];
                });
                return obj;
            });
        }

        if (!article || article.trim() === "") {
            console.log("‚ùå –ü—É—Å—Ç–æ–π –∞—Ä—Ç–∏–∫—É–ª");
            throw new Error(
                "üìù –ê—Ä—Ç–∏–∫—É–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
            );
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∞—Ä—Ç–∏–∫—É–ª–∞
        article = article.trim().toUpperCase();
        console.log("üìù –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª:", article);

        if (article.length < 3) {
            console.log("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∞—Ä—Ç–∏–∫—É–ª:", article);
            throw new Error(
                `üìù –ê—Ä—Ç–∏–∫—É–ª "${article}" —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π!\n\n–ê—Ä—Ç–∏–∫—É–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.`
            );
        }

        console.log("üöÄ Starting analysis for article:", article);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–∏–æ–¥
        let periodChosen = false;
        console.log(
            "üîç Received period params - Start:",
            periodStart,
            "End:",
            periodEnd
        );
        console.log(
            "üîç Period types - Start:",
            typeof periodStart,
            "End:",
            typeof periodEnd
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞—Ç
        const hasStartDate = periodStart && periodStart.trim() !== "";
        const hasEndDate = periodEnd && periodEnd.trim() !== "";

        if (hasStartDate || hasEndDate) {
            periodChosen = true;
            console.log("üìÖ Period filter will be applied");
        } else {
            console.log("‚ö†Ô∏è No dates selected - showing all data");
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ö–ê–ü–´ 3.0 (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
        let maxCPLThreshold = 3.5;
        let status = "–ê–∫—Ç–∏–≤–Ω—ã–π";
        let stock = "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
        let stockDays = "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
        let season = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
        let category = "–ù–µ —É–∫–∞–∑–∞–Ω–∞";
        let efficiencyZoneFormatted = {
            value: "--,--%",
            backgroundColor: "#f3f3f3",
            fontColor: "#666666",
        };
        let zoneABFormatted = "-";
        let zoneACFormatted = "-";
        let zoneADFormatted = "-";
        let zoneAEFormatted = "-";

        try {
            const ss = SpreadsheetApp.getActiveSpreadsheet();
            const sheetKapy = ss.getSheetByName("–ö–ê–ü–´ 3.0");

            if (sheetKapy) {
                console.log("üìä Reading data from –ö–ê–ü–´ 3.0 sheet...");
                const kapyData = sheetKapy.getDataRange().getValues();
                let articleRow = null;

                for (let i = 0; i < kapyData.length; i++) {
                    const cellValue = String(kapyData[i][1] || "").trim();
                    if (cellValue === article.trim()) {
                        articleRow = i + 1;
                        break;
                    }
                }

                // –ü–†–û–í–ï–†–ö–ê 1: –ê—Ä—Ç–∏–∫—É–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if (!articleRow) {
                    console.log("‚ùå Article not found in –ö–ê–ü–´ 3.0");
                    throw new Error(
                        `üìù –ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª!\n\n–ê—Ä—Ç–∏–∫—É–ª "${article}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–∞.`
                    );
                }

                // –ü–†–û–í–ï–†–ö–ê 2: –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä (–∫–æ–ª–æ–Ω–∫–∞ BQ = —Å—Ç–æ–ª–±–µ—Ü 69)
                const permissionValue = sheetKapy.getRange(articleRow, 69).getValue();
                console.log("üîê Checking permission for article:", article, "Permission value:", permissionValue);
                
                if (permissionValue !== 1 && permissionValue !== "1") {
                    console.log("‚ùå No permission to view article:", article);
                    throw new Error(
                        `üîí –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä!\n\n–î–æ—Å—Ç—É–ø –∫ –∞—Ä—Ç–∏–∫—É–ª—É "${article}" –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.`
                    );
                }

                console.log("‚úÖ Article found and permission granted:", article);

                if (articleRow) {
                    console.log("‚úÖ Found article in –ö–ê–ü–´ 3.0 at row:", articleRow);
                    const rawAB = sheetKapy.getRange(articleRow, 28).getValue();
                    const rawAF = sheetKapy.getRange(articleRow, 32).getValue();
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º AB (–∫–æ–ª–æ–Ω–∫–∞ 28) - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                    if (rawAB !== null && rawAB !== undefined && rawAB !== "" && !isNaN(rawAB) && Number(rawAB) > 0) {
                        maxCPLThreshold = Number(rawAB);
                    }
                    // –ï—Å–ª–∏ AB –ø—É—Å—Ç–∞—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º AF (–∫–æ–ª–æ–Ω–∫–∞ 32)
                    else if (rawAF !== null && rawAF !== undefined && rawAF !== "" && !isNaN(rawAF) && Number(rawAF) > 0) {
                        maxCPLThreshold = Number(rawAF);
                    }
                    // –ï—Å–ª–∏ –æ–±–µ –ø—É—Å—Ç—ã–µ - –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ 3.5
                    else {
                        maxCPLThreshold = 3.5;
                    }

                    status = String(
                        sheetKapy.getRange(articleRow, 4).getValue() || "–ê–∫—Ç–∏–≤–Ω—ã–π"
                    ).trim();
                    const stockValue = sheetKapy.getRange(articleRow, 34).getValue();
                    const stockDaysValue = sheetKapy.getRange(articleRow, 33).getValue();
                    const seasonEmoji = String(
                        sheetKapy.getRange(articleRow, 39).getValue() || ""
                    ).trim();
                    const categoryValue = String(
                        sheetKapy.getRange(articleRow, 44).getValue() || ""
                    ).trim();

                    stock =
                        stockValue !== null && stockValue !== undefined && stockValue !== ""
                            ? String(stockValue)
                            : "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
                    stockDays =
                        stockDaysValue !== null &&
                            stockDaysValue !== undefined &&
                            stockDaysValue !== ""
                            ? String(stockDaysValue)
                            : "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
                    season = parseSeason(seasonEmoji);
                    category = categoryValue || "–ù–µ —É–∫–∞–∑–∞–Ω–∞";

                    // –ó–æ–Ω—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    const efficiencyZoneValue = sheetKapy
                        .getRange(articleRow, 27)
                        .getValue();
                    const zoneAB = sheetKapy.getRange(articleRow, 28).getValue();
                    const zoneAC = sheetKapy.getRange(articleRow, 29).getValue();
                    const zoneAD = sheetKapy.getRange(articleRow, 30).getValue();
                    const zoneAE = sheetKapy.getRange(articleRow, 31).getValue();

                    // –ß–ò–¢–ê–ï–ú –¶–í–ï–¢–ê –ò–ó –Ø–ß–ï–ô–ö–ò AA (–∫–æ–ª–æ–Ω–∫–∞ 27) - –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò!
                    const efficiencyZoneCell = sheetKapy.getRange(articleRow, 27);
                    let zoneBackgroundColor = null;
                    let zoneFontColor = null;

                    try {
                        // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ —è—á–µ–π–∫–∏
                        zoneBackgroundColor = efficiencyZoneCell.getBackground();
                        // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç —à—Ä–∏—Ñ—Ç–∞ —è—á–µ–π–∫–∏
                        zoneFontColor = efficiencyZoneCell.getFontColor();
                        console.log(
                            "üé® Zone colors from sheet - Background:",
                            zoneBackgroundColor,
                            "Font:",
                            zoneFontColor
                        );
                    } catch (colorError) {
                        console.log("‚ö†Ô∏è Error reading cell colors:", colorError);
                        zoneBackgroundColor = "#f3f3f3";
                        zoneFontColor = "#666666";
                    }

                    efficiencyZoneFormatted =
                        efficiencyZoneValue !== null &&
                            efficiencyZoneValue !== undefined &&
                            efficiencyZoneValue !== ""
                            ? (Number(efficiencyZoneValue) * 100)
                                .toFixed(2)
                                .replace(".", ",") + "%"
                            : "--,--%";

                    zoneABFormatted =
                        zoneAB !== null && zoneAB !== undefined && zoneAB !== ""
                            ? Number(zoneAB).toFixed(2).replace(".", ",")
                            : "-";
                    zoneACFormatted =
                        zoneAC !== null && zoneAC !== undefined && zoneAC !== ""
                            ? Number(zoneAC).toFixed(2).replace(".", ",")
                            : "-";
                    zoneADFormatted =
                        zoneAD !== null && zoneAD !== undefined && zoneAD !== ""
                            ? Number(zoneAD).toFixed(2).replace(".", ",")
                            : "-";
                    zoneAEFormatted =
                        zoneAE !== null && zoneAE !== undefined && zoneAE !== ""
                            ? Number(zoneAE).toFixed(2).replace(".", ",")
                            : "-";

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                    efficiencyZoneFormatted = {
                        value:
                            efficiencyZoneValue !== null &&
                                efficiencyZoneValue !== undefined &&
                                efficiencyZoneValue !== ""
                                ? (Number(efficiencyZoneValue) * 100)
                                    .toFixed(2)
                                    .replace(".", ",") + "%"
                                : "--,--%",
                        backgroundColor: zoneBackgroundColor || "#f3f3f3",
                        fontColor: zoneFontColor || "#666666",
                    };
                }
            } else {
                console.log("‚ö†Ô∏è –ö–ê–ü–´ 3.0 sheet not found");
            }
        } catch (e) {
            console.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ö–ê–ü–´ 3.0:", e);
            // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –Ω–∞—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            if (e.message && (e.message.includes("üìã") || e.message.includes("üîí") || e.message.includes("üìù"))) {
                throw e;
            }
            // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
            throw new Error(
                `üìã –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!\n\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${e.message}\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`
            );
        }

        const displayMaxCPL = maxCPLThreshold;
        const displayCPL_ROI_minus5 = maxCPLThreshold;

        // –ü–û–°–¢–†–û–ï–ù–ò–ï –ï–î–ò–ù–û–ì–û SQL –ó–ê–ü–†–û–°–ê
        let dateFilter = "";
        if (periodChosen) {
            if (hasStartDate && hasEndDate) {
                // –û–±–∞ –¥–∞—Ç—ã —É–∫–∞–∑–∞–Ω—ã
                const startDateStr = Utilities.formatDate(
                    new Date(periodStart),
                    "Europe/Kiev",
                    "yyyy-MM-dd"
                );
                const endDateStr = Utilities.formatDate(
                    new Date(periodEnd),
                    "Europe/Kiev",
                    "yyyy-MM-dd"
                );
                dateFilter = ` AND \`adv_date\` >= '${startDateStr}' AND \`adv_date\` <= '${endDateStr}'`;
                console.log("üîç Date filter (both dates):", dateFilter);
            } else if (hasStartDate && !hasEndDate) {
                // –¢–æ–ª—å–∫–æ –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞, –¥–æ —Å–µ–≥–æ–¥–Ω—è
                const startDateStr = Utilities.formatDate(
                    new Date(periodStart),
                    "Europe/Kiev",
                    "yyyy-MM-dd"
                );
                const todayStr = Utilities.formatDate(
                    new Date(),
                    "Europe/Kiev",
                    "yyyy-MM-dd"
                );
                dateFilter = ` AND \`adv_date\` >= '${startDateStr}' AND \`adv_date\` <= '${todayStr}'`;
                console.log("üîç Date filter (start to today):", dateFilter);
            } else if (!hasStartDate && hasEndDate) {
                // –¢–æ–ª—å–∫–æ –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞, —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞
                const endDateStr = Utilities.formatDate(
                    new Date(periodEnd),
                    "Europe/Kiev",
                    "yyyy-MM-dd"
                );
                dateFilter = ` AND \`adv_date\` <= '${endDateStr}'`;
                console.log("üîç Date filter (beginning to end):", dateFilter);
            }
        } else {
            console.log("üîç No date filter applied - showing all dates");
        }

        // –û–ë–™–ï–î–ò–ù–ï–ù–ù–´–ô SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        const combinedSql = `
  SELECT 
    campaign_name,
    campaign_name_tracker,
    adv_group_name,
    adv_name,
    adv_date,
    adv_group_id,
    campaign_id,
    target_url,
    adv_id,
    adv_track_template,
    cpc,
    cpm,
    clicks_on_link,
    ctr,
    engagement_rate,
    engagement_view,
    showed,
    viewed,
    video_start_viewed,
    video_half_viewed,
    video_almost_viewed,
    video_full_viewed,
    video_name,
    valid_cpa,
    valid,
    cost,
    valid_cr,
    clicks_on_link_tracker,
    viewed_tracker,
    cpc_tracker,
    fraud,
    fraud_cpa
  FROM \`ads_collection\`
  WHERE \`source\` = 'Google' 
    AND (\`campaign_name\` LIKE '${article}%' OR \`campaign_name_tracker\` LIKE '${article}%')${dateFilter}
  ORDER BY adv_date
`;

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î - –û–î–ù–ò–ú –ó–ê–ü–†–û–°–û–ú
        console.log("üîç Fetching all data with combined query...");
        console.log("üîç SQL –∑–∞–ø—Ä–æ—Å:", combinedSql);
        console.log("üîç Article:", article);
        console.log("üîç Date filter applied:", periodChosen ? "YES" : "NO");
        if (periodChosen) {
            console.log("üîç Filter params - Start:", periodStart, "End:", periodEnd);
        }
        let allData;

        try {
            console.log("üîç –í—ã–∑—ã–≤–∞–µ–º getDataFromDatabase...");
            allData = getDataFromDatabase(combinedSql);
            console.log(
                "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç getDataFromDatabase:",
                allData ? allData.length : "null/undefined",
                "–∑–∞–ø–∏—Å–µ–π"
            );

            if (!allData || allData.length === 0) {
                console.log("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞:", article);
                throw new Error(
                    `üìä –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!\n\n–ê—Ä—Ç–∏–∫—É–ª "${article}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–∞\n‚Ä¢ –ê—Ä—Ç–∏–∫—É–ª –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É\n‚Ä¢ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥`
                );
            }

            console.log("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã:", allData.length, "–∑–∞–ø–∏—Å–µ–π");
        } catch (error) {
            console.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
            if (error.message.includes("üìä")) {
                throw error; // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞—à–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∫–∞–∫ –µ—Å—Ç—å
            }
            throw new Error(
                `üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!\n\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${error.message}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É\n‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`
            );
        }

        // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
        console.log("üìä Parsing database results...");
        const allRows = parseDbResults(allData);

        console.log("üìà Total rows from database:", allRows.length);

        // –°–û–ó–î–ê–ï–ú –ú–ê–ü–ü–ò–ù–ì campaign_name_tracker -> Buyer INFO –¥–ª—è —Å–≤—è–∑–∫–∏ —Å TikTok –¥–∞–Ω–Ω—ã–º–∏
        const campaignToBuyerMap = {}; // campaign_name -> buyer info
        const adGroupToBuyerMap = {}; // adv_group_id -> buyer info

        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –¥–∞–Ω–Ω—ã–º —Ç—Ä–µ–∫–µ—Ä–∞ –∏ —Å–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥
        console.log("üó∫Ô∏è Creating buyer mapping from tracker data...");
        allRows.forEach((row) => {
            const trackerName = String(row.campaign_name_tracker || "").trim();
            const campaignName = String(row.campaign_name || "").trim();
            const groupId = String(row.adv_group_id || "").trim();
            const groupName = String(row.adv_group_name || "").trim();

            if (trackerName && trackerName.includes(article)) {
                const campaignInfo = parseCampaignName(trackerName);
                if (campaignInfo.buyer) {
                    // –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –æ—Ç campaign_name –∫ buyer info
                    if (campaignName) {
                        campaignToBuyerMap[campaignName] = campaignInfo;
                        console.log(
                            `üîó Mapped campaign "${campaignName}" to buyer "${campaignInfo.buyer}"`
                        );
                    }

                    // –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –æ—Ç adv_group_id –∫ buyer info (—Å ID –≥—Ä—É–ø–ø—ã)
                    if (groupId) {
                        adGroupToBuyerMap[groupId] = {
                            ...campaignInfo,
                            groupId: groupId,
                        };
                        console.log(
                            `üîó Mapped group_id "${groupId}" to buyer "${campaignInfo.buyer}"`
                        );
                    }
                }
            }
        });

        console.log("üó∫Ô∏è Created mappings:");
        console.log(
            "Campaign to buyer map:",
            Object.keys(campaignToBuyerMap).length,
            "entries"
        );
        console.log(
            "Group ID to buyer map:",
            Object.keys(adGroupToBuyerMap).length,
            "entries"
        );

        // –°–û–ó–î–ê–ï–ú –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–• –î–õ–Ø –ì–†–£–ü–ü–ò–†–û–í–ö–ò
        console.log("üóÇÔ∏è Processing data structures...");
        let minDate = null,
            maxDate = null;

        // –û–±—â–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        const resultMap = {};
        const fbDataMap = {};

        // –ü–æ –±–∞–π–µ—Ä–∞–º
        const resultMapByBuyer = {};
        const fbDataMapByBuyer = {};

        // –ü–æ –≥—Ä—É–ø–ø–∞–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        const resultMapByGroup = {};
        const fbDataMapByGroup = {};

        // –ù–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê: –ë–∞–π–µ—Ä ‚Üí –ì—Ä—É–ø–ø–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        const resultMapByBuyerGroup = {};
        const fbDataMapByBuyerGroup = {};

        // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        const groupsByDate = {};
        const buyersByDate = {};
        const accountsByDate = {};
        const globalGroups = new Set();
        const globalBuyers = new Set();
        const globalAccounts = new Set();
        const buyerGroupsMap = {}; // { buyer: Set(groups) }
        let buyerVideosMap = {}; // { buyer: Set(videos) }
        let buyerSitesMap = {}; // { buyer: Set(sites) }
        let totalLeadsAll = 0,
            totalClicksAll = 0;
        const globalVideos = new Set(),
            globalSites = new Set();

        // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É Google Ads –º–µ—Ç—Ä–∏–∫
        function createGoogleMetricsObject() {
            return {
                adId: [],
                trackTemplate: [],
                engagementRate: [],
                ctr: [],
                cpm: [],
                cpc: [],
                engagementView: [],
                showed: [],
                viewed: [],
                linkClicks: [],
                videoStart: [],
                videoHalf: [],
                videoAlmost: [],
                videoFull: [],
                videoName: [],
                siteUrl: [],
            };
        }

        // –û–ë–†–ê–ë–û–¢–ö–ê –í–°–ï–• –î–ê–ù–ù–´–• –°–†–ê–ó–£ - –∏—Å–ø–æ–ª—å–∑—É—è –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è —Å–≤—è–∑–∫–∏
        console.log("üí∞üìò Processing Google Ads data with buyer mapping...");
        allRows.forEach((row) => {
            const trackerName = String(row.campaign_name_tracker || "").trim();
            const campaignName = String(row.campaign_name || "").trim();
            const groupId = String(row.adv_group_id || "").trim();
            const groupName = String(row.adv_group_name || "").trim();
            const advName = String(row.adv_name || "").trim();
            const targetUrl = String(row.target_url || "").trim();
            const dateObj = new Date(row.adv_date);

            if (isNaN(dateObj.getTime())) return;

            const dateStr = Utilities.formatDate(
                dateObj,
                "Europe/Kiev",
                "yyyy-MM-dd"
            );

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º buyer info - –ü–†–ò–û–†–ò–¢–ï–¢ tracker –¥–∞–Ω–Ω—ã–º
            let buyerInfo = null;
            if (trackerName && trackerName.includes(article)) {
                buyerInfo = parseCampaignName(trackerName);
            } else if (campaignName && campaignToBuyerMap[campaignName]) {
                buyerInfo = campaignToBuyerMap[campaignName];
            } else if (groupId && adGroupToBuyerMap[groupId]) {
                buyerInfo = adGroupToBuyerMap[groupId];
            }

            if (!buyerInfo || buyerInfo.article !== article) return;

            // –î–ê–ù–ù–´–ï –õ–ò–î–û–í –ò –†–ê–°–•–û–î–û–í (–∏–∑ tracker)
            const leads = Number(row.valid) || 0;
            const spend = Number(row.cost) || 0;
            const siteClicks = Number(row.clicks_on_link_tracker) || 0;

            // –î–ê–ù–ù–´–ï Google Ads –ú–ï–¢–†–ò–ö (–∏–∑ Google)
            const hasMetrics = campaignName || groupId; // –ï—Å—Ç—å –ª–∏ TikTok –º–µ—Ç—Ä–∏–∫–∏

            if (leads > 0 || spend > 0) {
                console.log(
                    `üí∞ Processing leads/spend for buyer: ${buyerInfo.buyer}, group: ${groupName}, date: ${dateStr}, leads: ${leads}, spend: ${spend}`
                );

                // –û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                if (!resultMap[dateStr]) resultMap[dateStr] = { leads: 0, spend: 0 };
                resultMap[dateStr].leads += leads;
                resultMap[dateStr].spend += spend;

                // –ü–æ –±–∞–π–µ—Ä–∞–º
                if (buyerInfo.buyer) {
                    if (!resultMapByBuyer[buyerInfo.buyer])
                        resultMapByBuyer[buyerInfo.buyer] = {};
                    if (!resultMapByBuyer[buyerInfo.buyer][dateStr])
                        resultMapByBuyer[buyerInfo.buyer][dateStr] = { leads: 0, spend: 0 };
                    resultMapByBuyer[buyerInfo.buyer][dateStr].leads += leads;
                    resultMapByBuyer[buyerInfo.buyer][dateStr].spend += spend;
                    globalBuyers.add(buyerInfo.buyer);

                    if (!buyersByDate[dateStr]) buyersByDate[dateStr] = [];
                    buyersByDate[dateStr].push(buyerInfo.buyer);
                }

                // –ü–æ –≥—Ä—É–ø–ø–∞–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                if (groupId) {
                    if (!resultMapByGroup[groupId]) resultMapByGroup[groupId] = {};
                    if (!resultMapByGroup[groupId][dateStr])
                        resultMapByGroup[groupId][dateStr] = { leads: 0, spend: 0 };
                    resultMapByGroup[groupId][dateStr].leads += leads;
                    resultMapByGroup[groupId][dateStr].spend += spend;
                    globalGroups.add(groupId);

                    if (!groupsByDate[dateStr]) groupsByDate[dateStr] = [];
                    groupsByDate[dateStr].push(groupId);
                }

                // –ù–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê: –ë–∞–π–µ—Ä ‚Üí –ì—Ä—É–ø–ø–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                if (buyerInfo.buyer && groupId) {
                    const buyerGroupKey = `${buyerInfo.buyer}:::${groupId}`;
                    if (!resultMapByBuyerGroup[buyerGroupKey])
                        resultMapByBuyerGroup[buyerGroupKey] = {};
                    if (!resultMapByBuyerGroup[buyerGroupKey][dateStr])
                        resultMapByBuyerGroup[buyerGroupKey][dateStr] = {
                            leads: 0,
                            spend: 0,
                        };
                    resultMapByBuyerGroup[buyerGroupKey][dateStr].leads += leads;
                    resultMapByBuyerGroup[buyerGroupKey][dateStr].spend += spend;

                    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∞–π–µ—Ä–∞
                    if (!buyerGroupsMap[buyerInfo.buyer])
                        buyerGroupsMap[buyerInfo.buyer] = new Set();
                    buyerGroupsMap[buyerInfo.buyer].add(groupId);
                }

                // –£—á–∏—Ç—ã–≤–∞–µ–º –¥–µ–Ω—å –¥–ª—è CR —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–∫–∞—Ö
                if (hasMetrics && siteClicks > 0) {
                    totalLeadsAll += leads;
                    totalClicksAll += siteClicks;
                }

                if (!minDate || dateObj < minDate) minDate = dateObj;
                if (!maxDate || dateObj > maxDate) maxDate = dateObj;
            }

            // Google Ads –ú–ï–¢–†–ò–ö–ò (engagement_rate, CTR, CPM, etc.)
            if (hasMetrics && (campaignName || groupId)) {
                console.log(`üìò Processing Google Ads metrics for buyer: ${buyerInfo.buyer}, group: ${groupName}, date: ${dateStr}`);

                // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                function addGoogleMetrics(targetObject, dateKey) {
                    if (!targetObject[dateKey]) {
                        targetObject[dateKey] = createGoogleMetricsObject();
                    }

                    targetObject[dateKey].adId.push(
                        row.adv_id !== undefined && row.adv_id !== null
                            ? String(row.adv_id)
                            : ""
                    );
                    targetObject[dateKey].trackTemplate.push(
                        row.adv_track_template !== undefined && row.adv_track_template !== null
                            ? String(row.adv_track_template)
                            : ""
                    );
                    targetObject[dateKey].engagementRate.push(
                        row.engagement_rate !== undefined && row.engagement_rate !== null
                            ? String(row.engagement_rate)
                            : ""
                    );
                    targetObject[dateKey].ctr.push(
                        row.ctr !== undefined && row.ctr !== null ? String(row.ctr) : ""
                    );
                    targetObject[dateKey].cpm.push(
                        row.cpm !== undefined && row.cpm !== null ? String(row.cpm) : ""
                    );
                    targetObject[dateKey].cpc.push(
                        row.cpc !== undefined && row.cpc !== null ? String(row.cpc) : ""
                    );
                    targetObject[dateKey].engagementView.push(
                        row.engagement_view !== undefined && row.engagement_view !== null
                            ? String(row.engagement_view)
                            : ""
                    );
                    targetObject[dateKey].showed.push(
                        row.showed !== undefined && row.showed !== null
                            ? String(row.showed)
                            : ""
                    );
                    targetObject[dateKey].viewed.push(
                        row.viewed !== undefined && row.viewed !== null
                            ? String(row.viewed)
                            : ""
                    );
                    targetObject[dateKey].linkClicks.push(
                        row.clicks_on_link !== undefined && row.clicks_on_link !== null
                            ? String(row.clicks_on_link)
                            : ""
                    );
                    targetObject[dateKey].videoStart.push(
                        row.video_start_viewed !== undefined && row.video_start_viewed !== null
                            ? String(row.video_start_viewed)
                            : ""
                    );
                    targetObject[dateKey].videoHalf.push(
                        row.video_half_viewed !== undefined && row.video_half_viewed !== null
                            ? String(row.video_half_viewed)
                            : ""
                    );
                    targetObject[dateKey].videoAlmost.push(
                        row.video_almost_viewed !== undefined && row.video_almost_viewed !== null
                            ? String(row.video_almost_viewed)
                            : ""
                    );
                    targetObject[dateKey].videoFull.push(
                        row.video_full_viewed !== undefined && row.video_full_viewed !== null
                            ? String(row.video_full_viewed)
                            : ""
                    );
                    targetObject[dateKey].videoName.push(
                        row.video_name !== undefined && row.video_name !== null
                            ? String(row.video_name)
                            : ""
                    );
                    targetObject[dateKey].siteUrl.push(targetUrl || "");
                }

                // –û–ë–©–ò–ï –î–ê–ù–ù–´–ï
                addGoogleMetrics(fbDataMap, dateStr);

                // –ü–û –ë–ê–ô–ï–†–ê–ú
                if (buyerInfo.buyer) {
                    if (!fbDataMapByBuyer[buyerInfo.buyer])
                        fbDataMapByBuyer[buyerInfo.buyer] = {};
                    addGoogleMetrics(fbDataMapByBuyer[buyerInfo.buyer], dateStr);
                }

                // –ü–û –ì–†–£–ü–ü–ê–ú –û–ë–™–Ø–í–õ–ï–ù–ò–ô
                if (groupId) {
                    if (!fbDataMapByGroup[groupId]) fbDataMapByGroup[groupId] = {};
                    addGoogleMetrics(fbDataMapByGroup[groupId], dateStr);
                }

                // –ë–ê–ô–ï–† ‚Üí –ì–†–£–ü–ü–ê –û–ë–™–Ø–í–õ–ï–ù–ò–ô
                if (buyerInfo.buyer && groupId) {
                    const buyerGroupKey = `${buyerInfo.buyer}:::${groupId}`;
                    if (!fbDataMapByBuyerGroup[buyerGroupKey])
                        fbDataMapByBuyerGroup[buyerGroupKey] = {};
                    addGoogleMetrics(fbDataMapByBuyerGroup[buyerGroupKey], dateStr);
                }

                // –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ –∏ —Å–∞–π—Ç—ã —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –±–∞–π–µ—Ä–∞–º
                const videoNameFromDB = row.video_name;
                if (videoNameFromDB && String(videoNameFromDB).trim() !== "") {
                    globalVideos.add(String(videoNameFromDB).trim());
                    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –∫ –±–∞–π–µ—Ä—É
                    if (!buyerVideosMap[buyerInfo.buyer])
                        buyerVideosMap[buyerInfo.buyer] = new Set();
                    buyerVideosMap[buyerInfo.buyer].add(String(videoNameFromDB).trim());
                }
                if (targetUrl && targetUrl.trim() !== "") {
                    globalSites.add(targetUrl.trim());
                    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–∞–π—Ç –∫ –±–∞–π–µ—Ä—É
                    if (!buyerSitesMap[buyerInfo.buyer])
                        buyerSitesMap[buyerInfo.buyer] = new Set();
                    buyerSitesMap[buyerInfo.buyer].add(targetUrl.trim());
                }
            }

            // –ü–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º
            if (buyerInfo.account) {
                globalAccounts.add(buyerInfo.account);
                if (!accountsByDate[dateStr]) accountsByDate[dateStr] = [];
                accountsByDate[dateStr].push(buyerInfo.account);
            }
        });

        console.log("üìä Data processing completed!");
        console.log("üë• Found buyers:", Array.from(globalBuyers));
        console.log("üìÅ Found groups:", Array.from(globalGroups));
        console.log("üé¨ Found videos:", globalVideos.size);
        console.log("üåê Found sites:", globalSites.size);
        console.log("üóÇÔ∏è Buyer groups mapping:", buyerGroupsMap);

        if (!minDate) {
            throw new Error(
                `üìä –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!\n\n–ü–æ –∞—Ä—Ç–∏–∫—É–ª—É "${article}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤.\n\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n‚Ä¢ –ê—Ä—Ç–∏–∫—É–ª –Ω–∞–ø–∏—Å–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ\n‚Ä¢ –ö–∞–º–ø–∞–Ω–∏–∏ –∏–º–µ–ª–∏ —Ä–∞—Å—Ö–æ–¥—ã\n‚Ä¢ –í—ã–±—Ä–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥`
            );
        }

        if (periodChosen) {
            if (hasStartDate) {
                minDate = new Date(periodStart);
            }
            if (hasEndDate) {
                maxDate = new Date(periodEnd);
            }
        }

        // –ú–∞—Å—Å–∏–≤ –¥–∞—Ç - —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∞—Ç—ã
        let firstActiveDate = null,
            lastActiveDate = null;

        // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω—É—é –¥–∞—Ç—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        Object.keys(resultMap).forEach((dateKey) => {
            const rec = resultMap[dateKey];
            if (rec.spend > 0) {
                const dateObj = new Date(dateKey);
                if (!firstActiveDate || dateObj < firstActiveDate)
                    firstActiveDate = dateObj;
                if (!lastActiveDate || dateObj > lastActiveDate)
                    lastActiveDate = dateObj;
            }
        });

        // –ï—Å–ª–∏ –ø–µ—Ä–∏–æ–¥ –≤—ã–±—Ä–∞–Ω, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∞—Ç–∞–º–∏ –ø–µ—Ä–∏–æ–¥–∞
        if (periodChosen) {
            if (
                hasStartDate &&
                minDate &&
                (!firstActiveDate || minDate > firstActiveDate)
            ) {
                firstActiveDate = minDate;
            }
            if (
                hasEndDate &&
                maxDate &&
                (!lastActiveDate || maxDate < lastActiveDate)
            ) {
                lastActiveDate = maxDate;
            }
        }

        const allDates = [];
        if (firstActiveDate && lastActiveDate) {
            curDate = new Date(firstActiveDate);
            while (curDate <= lastActiveDate) {
                allDates.push(new Date(curDate));
                curDate.setDate(curDate.getDate() + 1);
            }
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞
        function processSegment(
            segmentName,
            resultMapBySegment,
            fbDataMapBySegment,
            segmentType
        ) {
            console.log(`üîÑ Processing segment: ${segmentName} (${segmentType})`);

            let segmentMinDate = null,
                segmentMaxDate = null;

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–∞
            const segmentDateKeys = Object.keys(
                resultMapBySegment[segmentName] || {}
            );
            let checkDate =
                segmentDateKeys.length > 0
                    ? new Date(Math.min(...segmentDateKeys.map((d) => new Date(d))))
                    : new Date();
            const endDate =
                segmentDateKeys.length > 0
                    ? new Date(Math.max(...segmentDateKeys.map((d) => new Date(d))))
                    : new Date();

            while (checkDate <= endDate) {
                const dateKey = Utilities.formatDate(
                    checkDate,
                    "Europe/Kiev",
                    "yyyy-MM-dd"
                );
                const rec = resultMapBySegment[segmentName]
                    ? resultMapBySegment[segmentName][dateKey] || { leads: 0, spend: 0 }
                    : { leads: 0, spend: 0 };

                if (rec.spend > 0) {
                    if (!segmentMinDate) segmentMinDate = new Date(checkDate);
                    segmentMaxDate = new Date(checkDate);
                }

                checkDate.setDate(checkDate.getDate() + 1);
            }

            if (!segmentMinDate || !segmentMaxDate) {
                console.log(`‚ö†Ô∏è No active data found for segment: ${segmentName}`);
                return null;
            }

            console.log(
                `‚úÖ Segment ${segmentName} has data from ${segmentMinDate.toISOString().split("T")[0]
                } to ${segmentMaxDate.toISOString().split("T")[0]}`
            );

            const segmentDates = [];
            let curDateSeg = new Date(segmentMinDate);
            while (curDateSeg <= segmentMaxDate) {
                segmentDates.push(new Date(curDateSeg));
                curDateSeg.setDate(curDateSeg.getDate() + 1);
            }

            const segmentData = {
    dates: [],
    ratings: [],
    cplDay: [],
    leadsDay: [],
    spendDay: [],
    conversionDay: [],
    maxCPL: [],
    cplCumulative: [],
    cplCumulativeColors: [],
    cplCumulativeArrows: [],
    groups: [],
    engagementRate: [],
    ctr: [],
    cpm: [],
    cpc: [],
    engagementView: [],
    showed: [],
    viewed: [],
    linkClicks: [],
    videoStart: [],
    videoHalf: [],
    videoAlmost: [],
    videoFull: [],
    videoName: [],
    siteUrl: [],
    trackTemplate: [],
    freq: [],
    avgWatchTime: []
};

            let activeDaysSegment = 0,
                daysInNormSegment = 0,
                daysBelowAllowedSegment = 0;
            let segmentLeads = 0,
                segmentClicks = 0;
            const segmentVideos = new Set(),
                segmentSites = new Set();
            let aggCostSegment = 0,
                aggLeadsSegment = 0,
                prevDayGoodSegment = null;

            for (let i = 0; i < segmentDates.length; i++) {
                const d = segmentDates[i];
                const dateKey = Utilities.formatDate(d, "Europe/Kiev", "yyyy-MM-dd");
                const dateDisplay = Utilities.formatDate(
                    d,
                    "Europe/Kiev",
                    "dd.MM.yyyy"
                );

                segmentData.dates.push(dateDisplay);

                const rec = resultMapBySegment[segmentName]
                    ? resultMapBySegment[segmentName][dateKey] || { leads: 0, spend: 0 }
                    : { leads: 0, spend: 0 };
                const dayLeads = rec.leads;
                const daySpend = rec.spend;
                const dayCpl = dayLeads > 0 ? daySpend / dayLeads : 0;

                const fbDataSegment =
                    dayLeads > 0 || daySpend > 0
                        ? (fbDataMapBySegment[segmentName] &&
                            fbDataMapBySegment[segmentName][dateKey]) ||
                        createGoogleMetricsObject()
                        : createGoogleMetricsObject();

                if (dayLeads === 0 && daySpend === 0) {
                    segmentData.cplDay.push(0);
                    segmentData.leadsDay.push(0);
                    segmentData.spendDay.push(0);
                    segmentData.conversionDay.push("0.00%");
                    segmentData.maxCPL.push(displayMaxCPL);
                    segmentData.ratings.push("");

                    // –ì—Ä—É–ø–ø—ã –¥–ª—è –±–∞–π–µ—Ä–∞ (–¥–∞–∂–µ –¥–ª—è –Ω—É–ª–µ–≤—ã—Ö –¥–Ω–µ–π)
                    if (segmentType === "buyer") {
                        segmentData.groups.push("");
                    } else {
                        segmentData.groups.push("");
                    }

                    segmentData.engagementRate.push("");
                    segmentData.ctr.push("");
                    segmentData.cpm.push("");
                    segmentData.cpc.push("");
                    segmentData.engagementView.push("");
                    segmentData.showed.push("");
                    segmentData.viewed.push("");
                    segmentData.linkClicks.push("");
                    segmentData.videoStart.push("");
                    segmentData.videoHalf.push("");
                    segmentData.videoAlmost.push("");
                    segmentData.videoFull.push("");
                    segmentData.videoName.push("");
                    segmentData.siteUrl.push("");
                    segmentData.trackTemplate.push("");

                    aggCostSegment = 0;
                    aggLeadsSegment = 0;
                    segmentData.cplCumulative.push(0);
                    segmentData.cplCumulativeColors.push("gray");
                    segmentData.cplCumulativeArrows.push("");
                    prevDayGoodSegment = null;
                    continue;
                }

                let segmentDayConversionText = "--";
                if (fbDataSegment.linkClicks && dayLeads > 0) {
                    const segmentDayClicks = sumMultilineValues(fbDataSegment.linkClicks);
                    if (segmentDayClicks > 0) {
                        const segmentDayConversion = (dayLeads / segmentDayClicks) * 100;
                        segmentDayConversionText = segmentDayConversion.toFixed(2) + "%";
                    }
                }

                segmentData.cplDay.push(dayCpl);
                segmentData.leadsDay.push(dayLeads);
                segmentData.spendDay.push(daySpend);
                segmentData.conversionDay.push(segmentDayConversionText);
                segmentData.maxCPL.push(displayMaxCPL);

                // –ì—Ä—É–ø–ø—ã –¥–ª—è –±–∞–π–µ—Ä–∞
                if (segmentType === "buyer") {
                    const dayGroupsForBuyer = groupsByDate[dateKey]
                        ? groupsByDate[dateKey].filter((group) => {
                            const buyerGroups = buyerGroupsMap[segmentName] || new Set();
                            return buyerGroups.has(group);
                        })
                        : [];
                    const uniqueGroupsForBuyer = Array.from(
                        new Set(
                            dayGroupsForBuyer.filter(
                                (g) => g !== undefined && g !== null && g !== ""
                            )
                        )
                    ).reverse();
                    segmentData.groups.push(uniqueGroupsForBuyer.join("\n"));
                } else {
                    segmentData.groups.push("");
                }

                if (dayLeads > 0 || daySpend > 0) activeDaysSegment++;

                segmentData.engagementRate.push(processDayValues(fbDataSegment.engagementRate, 11));
                segmentData.ctr.push(processDayValues(fbDataSegment.ctr, 12));
                segmentData.cpm.push(processDayValues(fbDataSegment.cpm, 13));
                segmentData.cpc.push(processDayValues(fbDataSegment.cpc, 14));
                segmentData.engagementView.push(processDayValues(fbDataSegment.engagementView, 15));
                segmentData.showed.push(processDayValues(fbDataSegment.showed, 16));
                segmentData.viewed.push(processDayValues(fbDataSegment.viewed, 17));
                segmentData.linkClicks.push(processDayValues(fbDataSegment.linkClicks, 18));
                segmentData.videoStart.push(processDayValues(fbDataSegment.videoStart, 19));
                segmentData.videoHalf.push(processDayValues(fbDataSegment.videoHalf, 20));
                segmentData.videoAlmost.push(processDayValues(fbDataSegment.videoAlmost, 21));
                segmentData.videoFull.push(processDayValues(fbDataSegment.videoFull, 22));
                segmentData.videoName.push(processDayValues(fbDataSegment.videoName, 23));
                segmentData.siteUrl.push(processDayValues(fbDataSegment.siteUrl, 24));
                segmentData.trackTemplate.push(processDayValues(fbDataSegment.trackTemplate, 25));

                if (dayLeads > 0 && dayCpl <= displayMaxCPL) {
                    daysInNormSegment++;
                } else if (daySpend > 0) {
                    daysBelowAllowedSegment++;
                }

                fbDataSegment.videoName?.forEach((video) => {
                    if (video && video.trim() !== "") {
                        segmentVideos.add(video.trim());
                    }
                });
                fbDataSegment.siteUrl?.forEach((site) => {
                    if (site && site.trim() !== "") {
                        segmentSites.add(site.trim());
                    }
                });

                const dayClicksForCR = sumMultilineValues(fbDataSegment.linkClicks || []);
                if (dayClicksForCR > 0) {
                    segmentLeads += dayLeads;
                    segmentClicks += dayClicksForCR;
                }

                let rating;
                if (dayLeads === 0 && daySpend > 0) {
                    rating = "D";
                } else {
                    rating = calculateRating(dayCpl, maxCPLThreshold);
                }
                segmentData.ratings.push(rating);

                const dayIsGood = dayLeads > 0 && dayCpl <= displayMaxCPL;

                let arrow = "";
                if (prevDayGoodSegment !== null && prevDayGoodSegment !== dayIsGood) {
                    if (dayIsGood) {
                        arrow = "‚Üó";
                    } else {
                        arrow = "‚Üò";
                    }
                }

                if (prevDayGoodSegment !== null && prevDayGoodSegment !== dayIsGood) {
                    aggCostSegment = daySpend;
                    aggLeadsSegment = dayLeads;
                } else {
                    aggCostSegment += daySpend;
                    aggLeadsSegment += dayLeads;
                }

                const finalCpl =
                    aggLeadsSegment > 0 ? aggCostSegment / aggLeadsSegment : 0;
                segmentData.cplCumulative.push(finalCpl);

                segmentData.cplCumulativeColors.push(dayIsGood ? "green" : "red");
                segmentData.cplCumulativeArrows.push(arrow);

                prevDayGoodSegment = dayIsGood;
            }

            const segmentCR =
                segmentClicks > 0 ? (segmentLeads / segmentClicks) * 100 : 0;

            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞
            const segmentDateRanges = groupDateRanges(
                segmentData.dates,
                segmentData.spendDay
            );

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –º–∞—Å—Å–∏–≤—ã —Å –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞
            const newSegmentData = {
    dates: [],
    ratings: [],
    cplDay: [],
    leadsDay: [],
    spendDay: [],
    conversionDay: [],
    maxCPL: [],
    cplCumulative: [],
    cplCumulativeColors: [],
    cplCumulativeArrows: [],
    groups: [],
    engagementRate: [],
    ctr: [],
    cpm: [],
    cpc: [],
    engagementView: [],
    showed: [],
    viewed: [],
    linkClicks: [],
    videoStart: [],
    videoHalf: [],
    videoAlmost: [],
    videoFull: [],
    videoName: [],
    siteUrl: [],
    trackTemplate: [],
    columnSpans: [],
    columnClasses: [],
    freq: [],
    avgWatchTime: []
};

            segmentDateRanges.forEach((range) => {
                if (range.isZeroRange && range.startIndex !== range.endIndex) {
                    const rangeLabel = formatDateRange(range.startDate, range.endDate);
                    newSegmentData.dates.push(rangeLabel);
                    newSegmentData.columnSpans.push(
                        range.endIndex - range.startIndex + 1
                    );
                    newSegmentData.columnClasses.push("zero-spend-range");

                    newSegmentData.ratings.push("");
                    newSegmentData.cplDay.push(0);
                    newSegmentData.leadsDay.push(0);
                    newSegmentData.spendDay.push(0);
                    newSegmentData.conversionDay.push("0.00%");
                    newSegmentData.maxCPL.push(segmentData.maxCPL[range.startIndex] || 0);
                    newSegmentData.cplCumulative.push(0);
                    newSegmentData.cplCumulativeColors.push("gray");
                    newSegmentData.cplCumulativeArrows.push("");
                    newSegmentData.groups.push("");
                    newSegmentData.engagementRate.push("");
                    newSegmentData.ctr.push("");
                    newSegmentData.cpm.push("");
                    newSegmentData.cpc.push("");
                    newSegmentData.engagementView.push("");
                    newSegmentData.showed.push("");
                    newSegmentData.viewed.push("");
                    newSegmentData.linkClicks.push("");
                    newSegmentData.videoStart.push("");
                    newSegmentData.videoHalf.push("");
                    newSegmentData.videoAlmost.push("");
                    newSegmentData.videoFull.push("");
                    newSegmentData.videoName.push("");
                    newSegmentData.siteUrl.push("");
                    newSegmentData.trackTemplate.push("");
                } else {
                    for (let i = range.startIndex; i <= range.endIndex; i++) {
                        newSegmentData.dates.push(segmentData.dates[i]);
                        newSegmentData.columnSpans.push(1);
                        newSegmentData.columnClasses.push(
                            segmentData.spendDay[i] === 0
                                ? "zero-spend-single"
                                : "normal-spend"
                        );

                        newSegmentData.ratings.push(segmentData.ratings[i]);
                        newSegmentData.cplDay.push(segmentData.cplDay[i]);
                        newSegmentData.leadsDay.push(segmentData.leadsDay[i]);
                        newSegmentData.spendDay.push(segmentData.spendDay[i]);
                        newSegmentData.conversionDay.push(segmentData.conversionDay[i]);
                        newSegmentData.maxCPL.push(segmentData.maxCPL[i]);
                        newSegmentData.cplCumulative.push(segmentData.cplCumulative[i]);
                        newSegmentData.cplCumulativeColors.push(
                            segmentData.cplCumulativeColors[i]
                        );
                        newSegmentData.cplCumulativeArrows.push(
                            segmentData.cplCumulativeArrows[i]
                        );
                        newSegmentData.groups.push(segmentData.groups[i]);
                        newSegmentData.engagementRate.push(segmentData.engagementRate[i]);
                        newSegmentData.ctr.push(segmentData.ctr[i]);
                        newSegmentData.cpm.push(segmentData.cpm[i]);
                        newSegmentData.cpc.push(segmentData.cpc[i]);
                        newSegmentData.engagementView.push(segmentData.engagementView[i]);
                        newSegmentData.showed.push(segmentData.showed[i]);
                        newSegmentData.viewed.push(segmentData.viewed[i]);
                        newSegmentData.linkClicks.push(segmentData.linkClicks[i]);
                        newSegmentData.videoStart.push(segmentData.videoStart[i]);
                        newSegmentData.videoHalf.push(segmentData.videoHalf[i]);
                        newSegmentData.videoAlmost.push(segmentData.videoAlmost[i]);
                        newSegmentData.videoFull.push(segmentData.videoFull[i]);
                        newSegmentData.videoName.push(segmentData.videoName[i]);
                        newSegmentData.siteUrl.push(segmentData.siteUrl[i]);
                        newSegmentData.trackTemplate.push(segmentData.trackTemplate[i]);
                    }
                }
            });

            Object.assign(segmentData, newSegmentData);

            console.log(
                `‚úÖ Processed segment ${segmentName}: ${activeDaysSegment} active days, ${segmentVideos.size} videos, ${segmentSites.size} sites`
            );

            return {
                data: segmentData,
                metrics: {
                    activeDays: activeDaysSegment,
                    daysInNorm: daysInNormSegment,
                    daysBelowAllowed: daysBelowAllowedSegment,
                    cr: segmentCR.toFixed(2).replace(".", ",") + "%",
                    videos: segmentVideos.size,
                    sites: segmentSites.size,
                    videoNames: Array.from(segmentVideos).join('\n') || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                    siteUrls: Array.from(segmentSites).join('\n') || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                },
            };
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –¥–∞—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
        function groupDateRanges(dates, spends) {
            const ranges = [];
            let currentRange = null;

            for (let i = 0; i < dates.length; i++) {
                const isZeroSpend = spends[i] === 0;

                if (isZeroSpend) {
                    if (!currentRange) {
                        currentRange = {
                            startIndex: i,
                            endIndex: i,
                            startDate: dates[i],
                            endDate: dates[i],
                            isZeroRange: true,
                        };
                    } else {
                        currentRange.endIndex = i;
                        currentRange.endDate = dates[i];
                    }
                } else {
                    if (currentRange) {
                        ranges.push(currentRange);
                        currentRange = null;
                    }
                    ranges.push({
                        startIndex: i,
                        endIndex: i,
                        startDate: dates[i],
                        endDate: dates[i],
                        isZeroRange: false,
                    });
                }
            }

            if (currentRange) {
                ranges.push(currentRange);
            }

            return ranges;
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
        function formatDateRange(startDate, endDate) {
            if (startDate === endDate) {
                return startDate;
            }

            // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
            const start = new Date(startDate.split('.').reverse().join('-'));
            const end = new Date(endDate.split('.').reverse().join('-'));
            const daysDiff = Math.round((end - start) / (1000 * 60 * 60 * 24)) + 1;

            return `${daysDiff} –¥.`;
        }

        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—â–µ–π —Ç–∞–±–ª–∏—Ü—ã
        console.log("üìä Building general data...");
        const generalData = {
    dates: [],
    ratings: [],
    cplDay: [],
    leadsDay: [],
    spendDay: [],
    conversionDay: [],
    maxCPL: [],
    cplCumulative: [],
    cplCumulativeColors: [],
    cplCumulativeArrows: [],
    groups: [],
    buyers: [],
    accounts: [],
    engagementRate: [],
    ctr: [],
    cpm: [],
    cpc: [],
    engagementView: [],
    showed: [],
    viewed: [],
    linkClicks: [],
    videoStart: [],
    videoHalf: [],
    videoAlmost: [],
    videoFull: [],
    videoName: [],
    siteUrl: [],
    trackTemplate: [],
    columnSpans: [],
    columnClasses: [],
    freq: [],
    avgWatchTime: []
};
        let activeDays = 0,
            daysInNorm = 0,
            daysBelowAllowed = 0;
        let aggCost = 0,
            aggLeads = 0,
            prevDayGood = null;

        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        for (let i = 0; i < allDates.length; i++) {
            const d = allDates[i];
            const dateKey = Utilities.formatDate(d, "Europe/Kiev", "yyyy-MM-dd");
            const dateDisplay = Utilities.formatDate(d, "Europe/Kiev", "dd.MM.yyyy");

            generalData.dates.push(dateDisplay);

            const rec = resultMap[dateKey] || { leads: 0, spend: 0 };
            const dayLeads = rec.leads;
            const daySpend = rec.spend;

            if (dayLeads === 0 && daySpend === 0) {
                generalData.cplDay.push(0);
                generalData.leadsDay.push(0);
                generalData.spendDay.push(0);
                generalData.conversionDay.push("0.00%");
                generalData.maxCPL.push(displayMaxCPL);
                generalData.groups.push("");
                generalData.buyers.push("");
                generalData.accounts.push("");
                generalData.ratings.push("");

                generalData.engagementRate.push("");
                generalData.ctr.push("");
                generalData.cpm.push("");
                generalData.cpc.push("");
                generalData.engagementView.push("");
                generalData.showed.push("");
                generalData.viewed.push("");
                generalData.linkClicks.push("");
                generalData.videoStart.push("");
                generalData.videoHalf.push("");
                generalData.videoAlmost.push("");
                generalData.videoFull.push("");
                generalData.videoName.push("");
                generalData.siteUrl.push("");
                generalData.trackTemplate.push("");

                aggCost = 0;
                aggLeads = 0;
                generalData.cplCumulative.push(0);
                generalData.cplCumulativeColors.push("gray");
                generalData.cplCumulativeArrows.push("");
                prevDayGood = null;
                continue;
            }

            const dayCpl = dayLeads > 0 ? daySpend / dayLeads : 0;

            let dayConversionText = "--";
            if (fbDataMap[dateKey] && fbDataMap[dateKey].linkClicks && dayLeads > 0) {
                const dayClicks = sumMultilineValues(fbDataMap[dateKey].linkClicks);
                if (dayClicks > 0) {
                    const dayConversion = (dayLeads / dayClicks) * 100;
                    dayConversionText = dayConversion.toFixed(2) + "%";
                }
            }

            generalData.cplDay.push(dayCpl);
            generalData.leadsDay.push(dayLeads);
            generalData.spendDay.push(daySpend);
            generalData.conversionDay.push(dayConversionText);
            generalData.maxCPL.push(displayMaxCPL);

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–Ω—è
            const dayGroups = groupsByDate[dateKey] || [];
            const dayBuyers = buyersByDate[dateKey] || [];
            const dayAccounts = accountsByDate[dateKey] || [];

            // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±–∞–π–µ—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è
            const uniqueBuyers = [];
            dayBuyers.forEach((buyer) => {
                if (buyer && buyer.trim() !== "" && !uniqueBuyers.includes(buyer)) {
                    uniqueBuyers.push(buyer);
                }
            });

            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –±–∞–π–µ—Ä–∞–º –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            const sortedGroupsByBuyer = [];
            const sortedAccountsByBuyer = [];

            uniqueBuyers.forEach((buyer) => {
                // –ù–∞–π–¥–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã —ç—Ç–æ–≥–æ –±–∞–π–µ—Ä–∞ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
                const buyerGroups = [];
                const buyerAccounts = [];

                dayGroups.forEach((group) => {
                    if (group && group.trim() !== "") {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã –∫ –±–∞–π–µ—Ä—É —á–µ—Ä–µ–∑ buyerGroupsMap
                        if (buyerGroupsMap[buyer] && buyerGroupsMap[buyer].has(group)) {
                            if (!buyerGroups.includes(group)) {
                                buyerGroups.push(group);
                            }
                        }
                    }
                });

                dayAccounts.forEach((account) => {
                    if (
                        account &&
                        account.trim() !== "" &&
                        !buyerAccounts.includes(account)
                    ) {
                        buyerAccounts.push(account);
                    }
                });

                sortedGroupsByBuyer.push(...buyerGroups);
                sortedAccountsByBuyer.push(...buyerAccounts);
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            generalData.groups.push(sortedGroupsByBuyer.join("\n"));
            generalData.buyers.push(uniqueBuyers.join("\n"));
            generalData.accounts.push(sortedAccountsByBuyer.join("\n"));

            if (dayLeads > 0 || daySpend > 0) activeDays++;

            if (dayLeads > 0 && dayCpl <= displayMaxCPL) {
                daysInNorm++;
            } else if (daySpend > 0) {
                daysBelowAllowed++;
            }

            generalData.engagementRate.push(
                processDayValues(fbDataMap[dateKey] ? fbDataMap[dateKey].engagementRate : [], 11)
            );
            generalData.ctr.push(
                processDayValues(fbDataMap[dateKey] ? fbDataMap[dateKey].ctr : [], 12)
            );
            generalData.cpm.push(
                processDayValues(fbDataMap[dateKey] ? fbDataMap[dateKey].cpm : [], 13)
            );
            generalData.cpc.push(
                processDayValues(fbDataMap[dateKey] ? fbDataMap[dateKey].cpc : [], 14)
            );
            generalData.engagementView.push(
                processDayValues(fbDataMap[dateKey] ? fbDataMap[dateKey].engagementView : [], 15)
            );
            generalData.showed.push(
                processDayValues(fbDataMap[dateKey] ? fbDataMap[dateKey].showed : [], 16)
            );
            generalData.viewed.push(
                processDayValues(fbDataMap[dateKey] ? fbDataMap[dateKey].viewed : [], 17)
            );
            generalData.linkClicks.push(
                processDayValues(fbDataMap[dateKey] ? fbDataMap[dateKey].linkClicks : [], 18)
            );
            generalData.videoStart.push(
                processDayValues(fbDataMap[dateKey] ? fbDataMap[dateKey].videoStart : [], 19)
            );
            generalData.videoHalf.push(
                processDayValues(fbDataMap[dateKey] ? fbDataMap[dateKey].videoHalf : [], 20)
            );
            generalData.videoAlmost.push(
                processDayValues(fbDataMap[dateKey] ? fbDataMap[dateKey].videoAlmost : [], 21)
            );
            generalData.videoFull.push(
                processDayValues(fbDataMap[dateKey] ? fbDataMap[dateKey].videoFull : [], 22)
            );
            generalData.videoName.push(
                processDayValues(fbDataMap[dateKey] ? fbDataMap[dateKey].videoName : [], 23)
            );
            generalData.siteUrl.push(
                processDayValues(fbDataMap[dateKey] ? fbDataMap[dateKey].siteUrl : [], 24)
            );
            generalData.trackTemplate.push(
                processDayValues(fbDataMap[dateKey] ? fbDataMap[dateKey].trackTemplate : [], 25)
            );

            let rating;
            if (dayLeads === 0 && daySpend > 0) {
                rating = "D";
            } else {
                rating = calculateRating(dayCpl, maxCPLThreshold);
            }
            generalData.ratings.push(rating);

            const dayIsGood = dayLeads > 0 && dayCpl <= displayMaxCPL;

            let arrow = "";
            if (prevDayGood !== null && prevDayGood !== dayIsGood) {
                if (dayIsGood) {
                    arrow = "‚Üó";
                } else {
                    arrow = "‚Üò";
                }
            }

            if (prevDayGood !== null && prevDayGood !== dayIsGood) {
                aggCost = daySpend;
                aggLeads = dayLeads;
            } else {
                aggCost += daySpend;
                aggLeads += dayLeads;
            }

            const finalCpl = aggLeads > 0 ? aggCost / aggLeads : 0;
            generalData.cplCumulative.push(finalCpl);

            generalData.cplCumulativeColors.push(dayIsGood ? "green" : "red");
            generalData.cplCumulativeArrows.push(arrow);

            prevDayGood = dayIsGood;
        }

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
        const dateRanges = groupDateRanges(generalData.dates, generalData.spendDay);

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –º–∞—Å—Å–∏–≤—ã —Å –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏
        const newGeneralData = {
    dates: [],
    ratings: [],
    cplDay: [],
    leadsDay: [],
    spendDay: [],
    conversionDay: [],
    maxCPL: [],
    cplCumulative: [],
    cplCumulativeColors: [],
    cplCumulativeArrows: [],
    groups: [],
    buyers: [],
    accounts: [],
    engagementRate: [],
    ctr: [],
    cpm: [],
    cpc: [],
    engagementView: [],
    showed: [],
    viewed: [],
    linkClicks: [],
    videoStart: [],
    videoHalf: [],
    videoAlmost: [],
    videoFull: [],
    videoName: [],
    siteUrl: [],
    trackTemplate: [],
    columnSpans: [],
    columnClasses: [],
    freq: [],
    avgWatchTime: []
};

        dateRanges.forEach((range) => {
            if (range.isZeroRange && range.startIndex !== range.endIndex) {
                const rangeLabel = formatDateRange(range.startDate, range.endDate);
                newGeneralData.dates.push(rangeLabel);
                newGeneralData.columnSpans.push(range.endIndex - range.startIndex + 1);
                newGeneralData.columnClasses.push("zero-spend-range");

                newGeneralData.ratings.push("");
                newGeneralData.cplDay.push(0);
                newGeneralData.leadsDay.push(0);
                newGeneralData.spendDay.push(0);
                newGeneralData.conversionDay.push("0.00%");
                newGeneralData.maxCPL.push(generalData.maxCPL[range.startIndex]);
                newGeneralData.cplCumulative.push(0);
                newGeneralData.cplCumulativeColors.push("gray");
                newGeneralData.cplCumulativeArrows.push("");
                newGeneralData.groups.push("");
                newGeneralData.buyers.push("");
                newGeneralData.accounts.push("");
                newGeneralData.engagementRate.push("");
                newGeneralData.ctr.push("");
                newGeneralData.cpm.push("");
                newGeneralData.cpc.push("");
                newGeneralData.engagementView.push("");
                newGeneralData.showed.push("");
                newGeneralData.viewed.push("");
                newGeneralData.linkClicks.push("");
                newGeneralData.videoStart.push("");
                newGeneralData.videoHalf.push("");
                newGeneralData.videoAlmost.push("");
                newGeneralData.videoFull.push("");
                newGeneralData.videoName.push("");
                newGeneralData.siteUrl.push("");
                newGeneralData.trackTemplate.push("");
            } else {
                for (let i = range.startIndex; i <= range.endIndex; i++) {
                    newGeneralData.dates.push(generalData.dates[i]);
                    newGeneralData.columnSpans.push(1);
                    newGeneralData.columnClasses.push(
                        generalData.spendDay[i] === 0 ? "zero-spend-single" : "normal-spend"
                    );

                    newGeneralData.ratings.push(generalData.ratings[i]);
                    newGeneralData.cplDay.push(generalData.cplDay[i]);
                    newGeneralData.leadsDay.push(generalData.leadsDay[i]);
                    newGeneralData.spendDay.push(generalData.spendDay[i]);
                    newGeneralData.conversionDay.push(generalData.conversionDay[i]);
                    newGeneralData.maxCPL.push(generalData.maxCPL[i]);
                    newGeneralData.cplCumulative.push(generalData.cplCumulative[i]);
                    newGeneralData.cplCumulativeColors.push(
                        generalData.cplCumulativeColors[i]
                    );
                    newGeneralData.cplCumulativeArrows.push(
                        generalData.cplCumulativeArrows[i]
                    );
                    newGeneralData.groups.push(generalData.groups[i]);
                    newGeneralData.buyers.push(generalData.buyers[i]);
                    newGeneralData.accounts.push(generalData.accounts[i]);
                    newGeneralData.engagementRate.push(generalData.engagementRate[i]);
                    newGeneralData.ctr.push(generalData.ctr[i]);
                    newGeneralData.cpm.push(generalData.cpm[i]);
                    newGeneralData.cpc.push(generalData.cpc[i]);
                    newGeneralData.engagementView.push(generalData.engagementView[i]);
                    newGeneralData.showed.push(generalData.showed[i]);
                    newGeneralData.viewed.push(generalData.viewed[i]);
                    newGeneralData.linkClicks.push(generalData.linkClicks[i]);
                    newGeneralData.videoStart.push(generalData.videoStart[i]);
                    newGeneralData.videoHalf.push(generalData.videoHalf[i]);
                    newGeneralData.videoAlmost.push(generalData.videoAlmost[i]);
                    newGeneralData.videoFull.push(generalData.videoFull[i]);
                    newGeneralData.videoName.push(generalData.videoName[i]);
                    newGeneralData.siteUrl.push(generalData.siteUrl[i]);
                    newGeneralData.trackTemplate.push(generalData.trackTemplate[i]);
                }
            }
        });

        Object.assign(generalData, newGeneralData);

        // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ë–∞–π–µ—Ä ‚Üí –ì—Ä—É–ø–ø–∞
        console.log("üå≤ Processing buyer-group hierarchy data...");
        const buyerGroupsData = {};

        // –°–æ–∑–¥–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        Array.from(globalBuyers).forEach((buyerName) => {
            console.log(`üë§ Processing buyer: ${buyerName}`);

            buyerGroupsData[buyerName] = {
                buyerData: processSegment(
                    buyerName,
                    resultMapByBuyer,
                    fbDataMapByBuyer,
                    "buyer"
                ),
                groups: {},
            };

            // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∞–π–µ—Ä–∞ –Ω–∞—Ö–æ–¥–∏–º –µ–≥–æ –≥—Ä—É–ø–ø—ã
            if (buyerGroupsMap[buyerName]) {
                console.log(
                    `üìÅ Found ${buyerGroupsMap[buyerName].size} groups for buyer ${buyerName}:`,
                    Array.from(buyerGroupsMap[buyerName])
                );

                Array.from(buyerGroupsMap[buyerName]).forEach((groupName) => {
                    console.log(
                        `üìÇ Processing group: ${groupName} for buyer: ${buyerName}`
                    );

                    const buyerGroupKey = `${buyerName}:::${groupName}`;

                    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –±–∞–π–µ—Ä-–≥—Ä—É–ø–ø–∞
                    const buyerGroupData = processSegment(
                        buyerGroupKey,
                        resultMapByBuyerGroup,
                        fbDataMapByBuyerGroup,
                        "buyer-group"
                    );
                    if (buyerGroupData) {
                        buyerGroupsData[buyerName].groups[groupName] = buyerGroupData;
                        console.log(
                            `‚úÖ Added group ${groupName} data for buyer ${buyerName} with ${buyerGroupData.metrics.activeDays} active days`
                        );
                    } else {
                        console.log(
                            `‚ö†Ô∏è No data found for group ${groupName} of buyer ${buyerName}`
                        );
                    }
                });
            } else {
                console.log(`‚ö†Ô∏è No groups found for buyer ${buyerName}`);
            }
        });

        console.log(
            "üå≤ Buyer-group hierarchy created:",
            Object.keys(buyerGroupsData).length,
            "buyers"
        );
        console.log("üéØ Final structure overview:");
        Object.keys(buyerGroupsData).forEach((buyer) => {
            console.log(
                `  üë§ ${buyer}: ${Object.keys(buyerGroupsData[buyer].groups).length
                } groups`
            );
        });

        // –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        const crValue =
            totalClicksAll > 0 ? (totalLeadsAll / totalClicksAll) * 100 : 0;
        const crStr = crValue.toFixed(2).replace(".", ",") + "%";

        console.log("üéâ Analysis completed successfully!");
        console.log("üìä Total unique videos found:", globalVideos.size);
        console.log("üë• Buyers with groups:", Object.keys(buyerGroupsData));

        const finalResult = {
            article: article,
            generalData: generalData,
            buyerGroupsData: buyerGroupsData, // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –î–ï–†–ï–í–û–í–ò–î–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê —Å –ø–æ–ª–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
            generalMetrics: {
                activeDays: activeDays,
                daysInNorm: daysInNorm,
                daysBelowAllowed: daysBelowAllowed,
                totalGroups: globalGroups.size,
                totalBuyers: globalBuyers.size,
                totalAccounts: globalAccounts.size,
                cr: crStr,
                videos: globalVideos.size,
                sites: globalSites.size,
                displayMaxCPL: displayMaxCPL.toFixed(2),
                displayCPL_ROI_minus5: displayCPL_ROI_minus5.toFixed(2),
                groupNames: sortMetricsByBuyers(
                    Array.from(globalGroups),
                    Array.from(globalBuyers),
                    buyerGroupsMap
                ),
                buyerNames: Array.from(globalBuyers).join("\n"),
                accountNames: Array.from(globalAccounts).join("\n"),
                videoNames: sortVideosByBuyers(
                    Array.from(globalBuyers),
                    buyerVideosMap,
                    globalVideos
                ),
                siteUrls: sortSitesByBuyers(
                    Array.from(globalBuyers),
                    buyerSitesMap,
                    globalSites
                ),
                status: status,
                season: season,
                category: category,
                stock: stock,
                stockDays: stockDays,
                efficiencyZone: efficiencyZoneFormatted,
                zoneAB: zoneABFormatted,
                zoneAC: zoneACFormatted,
                zoneAD: zoneADFormatted,
                zoneAE: zoneAEFormatted,
            },
        };

        console.log("üî• =================================");
        console.log("üî• –í–û–ó–í–†–ê–©–ê–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢");
        console.log("üî• –ê—Ä—Ç–∏–∫—É–ª:", finalResult.article);
        console.log("üî• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞—Ç:", finalResult.generalData.dates.length);
        console.log(
            "üî• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–π–µ—Ä–æ–≤:",
            Object.keys(finalResult.buyerGroupsData).length
        );
        console.log("üî• =================================");

        return finalResult;
    } catch (error) {
        console.log("üî• =================================");
        console.log("üî• –û–®–ò–ë–ö–ê –í buildChartForArticle");
        console.log("üî• –¢–∏–ø –æ—à–∏–±–∫–∏:", typeof error);
        console.log("üî• –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:", error.message);
        console.log("üî• –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:", error);
        console.log("üî• Stack trace:", error.stack);
        console.log("üî• =================================");

        // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –Ω–∞—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–¥–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if (
            error.message &&
            (error.message.includes("üìä") ||
                error.message.includes("üîå") ||
                error.message.includes("üö®") ||
                error.message.includes("üîß") ||
                error.message.includes("üìù") ||
                error.message.includes("üìã") ||
                error.message.includes("üîí"))
        ) {
            console.log("üî• –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –æ—à–∏–±–∫—É");
            throw error;
        }

        // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
        console.log("üî• –°–æ–∑–¥–∞–µ–º –æ–±—â—É—é –æ—à–∏–±–∫—É");
        throw new Error(
            `‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞!\n\n–ê—Ä—Ç–∏–∫—É–ª: ${article}\n\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n${error.message}\n\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n‚Ä¢ –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`
        );
    }
}
